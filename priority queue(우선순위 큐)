priority queue(우선순위큐)는 queue의 진화버전이라고 할 수 있다.
(*참고* queue는 가장 먼저 insert된 원소가 가장 먼저 return됨 이름하야 First In First Out:FIFO)
우선순위큐는 insert된 순서에 상관 없이 우선순위가 높은 원소를 제일 먼저 return 해준다.
병원 응급실을 예를 들어 생각하면 된다. 누가 먼저 왔는지에 상관없이 치료가 제일 시급한 환자가 제일 먼저 치료를 받는다.
이 우선순위큐를 구현하는 방법에는 몇가지가 있지만 heap으로 구현하는게 가장 좋다
(Using heaps to implement a priority queue is the most efficient way and it provides a lot better performance when compared to the linked lists and arrays.
Contrary to the linked list and array, heap implementation takes O (logn) time for insert and delete operations of the priority queue. )
이 heap이란것은 완전이진트리를 base로 하는 구조다. (이진트리와 다른게 있다면 heap은 중복원소가 허용됨.)
부모노드가 자식노드보다 항상 큰 값을 가지는 max-heap과 반대로 부모노드가 자식노드보다 항상 작은 값을 가지는 min-heap이 있다.
(구글링 하다가 본건데 1.heap이 priority queue의 한 종류다. 2. heap은 우선순위큐를 위하여 만들어진 자료구조다. 라는 표현들이 있었다.
heap이랑 priority queue가 같다고 봐도 되려나.. ???)

c++로 구현해보기
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#include <iostream>
#include <queue>
using namespace std;
void displaypq(priority_queue <int> pq)
{
    priority_queue <int> pqueue = pq;
    while(!pqueue.empty())
    {
        cout << '\t' << pqueue.top();
        pqueue.pop();
    }
    cout << '\n';
}
int main ()
{
    priority_queue <int> pq;
pq.push(1);
pq.push(3);
pq.push(5);
pq.push(7);
pq.push(9);
    
cout << "Size of the queue(pq.size()): " << pq.size();
cout << "\nTop element of the queue(pq.top()): " pq.top();
cout << "\nThe priority queue pq is: ";
display(pq);
    
cout << "\nPriority queue, after pq.pop() operation : ";
pq.pop();
display(pq);
    
return 0;
}
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Output:
Size of the queue(pq.size()): 5
Top element of the queue(pq.top()): 9
The priority queue pq is:  9 7 5 3 1
Priority queue, after pq.pop() operation : 7 5 3 1


//priority queue의 놀라운 점은 sort를 알아서 해준다는점이다. ()

